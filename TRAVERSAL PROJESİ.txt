TRAVERSAL PROJESİ

1. .NETCORE MVC PROJESİ OLUŞTURULDU
2. EntityLayer adında CLASS LIBRARY PROJESI OLUŞTUR
3. DataAccessLayer adında CLASS LIBRARY PROJESI OLUŞTUR
4. BussinessLayer adında CLASS LIBRARY PROJESI OLUŞTUR

DbContext Sınıfı EFCore paketi tarafınfan saglanır.
Context sınınfı DbContexten miras alınarak oluşturulur.

OnConfiguring metodu: EfCore un veritabanı baglantı ayarlarını yapılandırır. Metot protected yapılır boylece sadece ilgili sınıf ve o sınıftan tureyen metotlar erişebilir.


using keyword, nesnenin otomatik olarak dispose edilmesini sağlar. Nesne kullanıldıktan sonra bellekten temizlenir.


Business ve ui kısmına  fluent validation aspnet paketi kurulacak


AspNet Core, MVC Farkı:
	
	Coklu platformu destekleyen(Wimdows,Linux,macos) bir framework tur.
	Web Api, Razor Pages, Blazor gibi mimarileri destekler.
MVC:
	Bir yazılım mimari desendir.
	Asp.Net içinde bir web uygulaması geliştirmme yontemi olarak kullanılır.

  Asp.Net bir framework tur. Mvc tasarım desenidir.


PartialView, ViewComponenet Farkı Nedir

PartialView sadece Html tekrarını azaltmak için kullanılır. Ana View den veri alır. İş mantıgı barındırmaz. Controllerdan cagırılmaz sadece Ana View den cagırılır. 

ViewComponenet

	Controller ve Viewden bagımsızdır. Kendşne ait business logic içerebilir.

Asp.net core Mvc Metot geri dönüş tipleri:
	IActionResult
	async Task<IActionResult>   
	JsonResult
	async Task<FileResult> 


	Async, Veri tabanı işelemleri,api cagrılarında gibi uzun işlemleri async calıştırır boyleleikle sunucular bloke edilemz ve diğer işlemler de bekletilmeden gerçekleştirilir.
	
Set<T>()
	T türündeki bir varlık (entity) için ilgili DbSet'i (veri tabanı tablosunu) tehsil eder.
	Find(id), Add(), Remove(), ToList() gibi işlemleri yapabilmenizi sağlar.
	Context içindeki belirli bir varlık türü için sorgulama yapmayı kolaylaştırır.

 Expression Nedir?
	 C#'ta LINQ (Language Integrated Query) ile dinamik filtreleme yapmayı sağlayan bir ifade ağacı (Expression Tree) türüdür. Bu ifade, veritabanı sorgularına çevrilebilir ve Entity Framework gibi ORM'ler tarafından SQL sorgularına 	dönüştürülerek doğrudan veritabanında çalıştırılabilir.
	
	Func<T, bool> nedir?
	T → Generic bir sınıf veya entity (örneğin: Comment, Product, User vb.).

	Func<T, bool> → T türünde bir nesneyi alıp, bool (true/false) döndüren bir fonksiyondur.

	Örneğin: c => c.CommentState == true ifadesi bir Func<Comment, bool> ifadesidir.

	Expression<Func<T, bool>> nedir?

	Expression<> → Bu ifade bir Expression Tree (ifade ağacı) oluşturur.

	Entity Framework bu ifadeyi SQL'e çevirebilir!

	Normal Func<T, bool> ile farkı, bu ifadenin veritabanında işlenmek üzere bir sorgu haline getirilmesidir.


Html helper, tag helper nedir, farkları nelerdir?

1. HTML Helper Nedir?
HTML Helper, C# kodu ile HTML etiketi oluşturmamızı sağlayan bir yapıdır.
ASP.NET MVC’nin eski sürümlerinden beri kullanılan bir tekniktir.

✅ Özellikleri:

C# kodu kullanarak HTML oluşturur.

Razor dosyasında (.cshtml) @Html veya @Form gibi yardımcı metotlar kullanılır.

HTML etiketleri metotlar ile oluşturulur.
 2. Tag Helper Nedir?
Tag Helper, HTML etiketleri içinde C# kodu çalıştırmamızı sağlayan ASP.NET Core’un modern bir özelliğidir.
HTML ile daha doğal bir yazım formatı sunduğu için HTML Helper’ın yerini almıştır.

✅ Özellikleri:

HTML etiketleri ile direkt çalışır, C# kodu gibi görünmez.

HTML dosyasında özel Tag Helper’lar kullanılabilir.

Daha okunaklı ve anlaşılır bir yapı sunar.

Eski ASP.NET MVC sürümleriyle uyumlu değildir (sadece ASP.NET Core’da kullanılır).

Bütün projelerde varsayılan olarak etkin değil, bazı durumlarda _ViewImports.cshtml içinde @addTagHelper ile etkinleştirilmesi gerekir.

ornek:
<input asp-for="UserName" class="form-control" placeholder="Enter username" />

Bu kodun ürettiği HTML çıktısı:
<input type="text" id="UserName" name="UserName" class="form-control" placeholder="Enter username" />

asp-validation-summary Nedir?
	Bu özellik, form gönderildiğinde oluşan doğrulama hatalarını bir liste halinde göstermeye yarar.

3 farklı değer alabilir:

None (Varsayılan),	Hiçbir doğrulama mesajını göstermez.
ModelOnly,	Sadece model düzeyindeki hataları gösterir.
All,	Hem model düzeyindeki, hem de bireysel alan (field) hatalarını gösterir.


@model	View için kullanılacak modelin türünü tanımlar. (@model Product)
@Model	View içinde modele erişmek için kullanılır. (@Model.Name)